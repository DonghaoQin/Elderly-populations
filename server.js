import express from 'express';
import cors from 'cors';
import sgMail from '@sendgrid/mail';
import multer from 'multer';
import fs from 'fs';
import axios from 'axios';  // Import axios for making API requests

const app = express();
const port = 3000;

sgMail.setApiKey('');  // Replace with your SendGrid API key
const OPENAI_API_KEY = '';  // Replace with your OpenAI API key

app.use(cors());
app.use(express.json());

const upload = multer({ dest: 'uploads/' });

app.post('/send-email', upload.single('attachment'), async (req, res) => {
  console.log('Received email send request:', req.body);

  const { to, subject, text } = req.body;
  const attachmentPath = req.file ? req.file.path : null;

  // Retry mechanism for calling OpenAI API
  const retryOpenAiRequest = async (maxRetries, delay) => {
    let attempt = 0;

    while (attempt < maxRetries) {
      try {
        console.log('Calling OpenAI API...');
        const openAiResponse = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-3.5-turbo',  // Use 'gpt-4' if you have access
            messages: [
              {
                role: 'system',
                content: 'You are an assistant helping with email writing.',
              },
              {
                role: 'user',
                content: `Write an email with the subject: ${subject} and body: ${text}`,  // Correct template literal
              },
            ],
            max_tokens: 200,
            temperature: 0.7,
          },
          {
            headers: {
              Authorization: `Bearer ${OPENAI_API_KEY}`,
            }
          }
        );

        // If successful, return the response
        return openAiResponse.data.choices[0].message.content;
      } catch (error) {
        if (error.response && error.response.status === 429 && attempt < maxRetries) {
          // If 429 error, wait and retry
          console.warn(`Attempt ${attempt + 1} failed due to rate limit. Retrying in ${delay / 1000} seconds...`);  // Correct template literal
          attempt++;
          await new Promise((resolve) => setTimeout(resolve, delay));
        } else {
          // If other errors or max retries exceeded, throw error
          throw error;
        }
      }
    }
  };

  try {
    // Call OpenAI API with retry mechanism
    const generatedText = await retryOpenAiRequest(3, 3000);  // Retry 3 times with 3-second delay
    console.log('Generated email content from OpenAI:', generatedText);

    // Modify the email body to include OpenAI's generated text
    const messages = to.map((recipient) => ({
      to: recipient,
      from: 'dillion0504@gmail.com',
      subject,
      text: generatedText,  // Use the text generated by OpenAI
      attachments: attachmentPath
        ? [
            {
              content: fs.readFileSync(attachmentPath).toString('base64'),
              filename: req.file.originalname,
              type: req.file.mimetype,
              disposition: 'attachment',
            },
          ]
        : [],
    }));

    console.log('Sending bulk emails to:', to);
    await sgMail.send(messages);  // Send emails using SendGrid
    console.log('Emails sent successfully');

    if (attachmentPath) {
      fs.unlinkSync(attachmentPath);  // Delete the attachment after sending the email
    }

    res.status(200).json({ message: 'Emails sent successfully with OpenAI-generated content!' });
  } catch (error) {
    console.error('Error sending emails or calling OpenAI API:', error.response ? error.response.body : error);
    res.status(500).json({ error: 'Failed to send emails or generate content.' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
